{
  "Common": {
    "access": "Acessar",
    "commingSoon": "Em breve"
  },
  "Header": {
    "light": "Claro",
    "dark": "Escuro",
    "home": "Início",
    "tutorials": "Tutoriais"
  },
  "Hero": {
    "description": "Desenvolvedor Front-end graduado em Engenharia de Computação, com 3+ anos de experiência. Tenho atuado com destaque na empresa MB Labs por mais de um ano, contribuindo para projetos de grande escala e trabalhando com tecnologias avançadas. Possuo habilidades sólidas em frameworks CSS (Chakra UI, Bootstrap, Ant Design), Redux, Zustand, Context, Next.js, Server Components, React Query entre outras tecnologias voltadas para o React. Sempre compromissado em aprimorar habilidades front-end. Bem-vindo(a) à minha página web, onde compartilho conhecimentos e projetos!",
    "developer": "Desenvolvedor Front-end",
    "footerTitle": "Principais Tecnologias"
  },
  "Projects": {
    "title": "Projetos",
    "descriptions": {
      "B&T": "Empresa de tecnologia que atua no mercado de câmbio. Trabalho no desenvolvimento de um sistema de gestão de pagamentos, utilizando como principais tecnologias React, JavaScript, Redux e Material-UI.",
      "Cinemark": "Empresa que dispensa apresentação. Trabalho inicial no desenvolvimento e reformulação do novo site, utilizando como principais tecnologias Next.js 13, Chakra UI, React Query e Zustand.",
      "CargoPlace": "Empresa do ramo de transporte de cargas. Trabalho no desenvolvimento de aplicações utilizando como principais tecnologias Next.js, Context API e Chakra UI.",
      "Arco": "Arco, empresa do ramo de educação. Trabalho no desenvolvimento de aplicações utilizando como principais tecnologias Next.js, Context API e Chakra UI.",
      "Marvin": "Desenvolvedor Full Stack na Marvin, empresa do ramo de imóveis. Trabalho no desenvolvimento de aplicações utilizando como principais tecnologias React, JavaScript, Redux e Material-UI.",
      "Zap": "Desenvolvedor Back-end na Zap, empresa do ramo de delivery. Trabalho no desenvolvimento de aplicações utilizando como principais tecnologias Node.js."
    }
  },
  "Tutorials": {
    "title": "Tutoriais",
    "description": "Acompanhe tutoriais sobre os principais recursos para a construção de aplicações web modernas usando Next.js.",
    "jest": {
      "title": "Testes com Jest",
      "description": "Aprenda a testar aplicações Next.js com Jest e React Testing Library.",
      "unitTitle": "Testes Unitários",
      "unitDescription": "Testes unitários são testes que verificam se uma unidade de código (função, classe, componente) funciona como esperado. São muito importantes para garantir que o código funcione corretamente e que não quebre quando novas funcionalidades forem adicionadas. Vamos ver como os testes estão aplicados em nosso projeto de exemplo.",
      "whatToTestTitle": "O que testar?",
      "whatToTestDescription": "Durante o desenvolvimento deste projeto, ocorreu um problema ao refatorar o componente 'CardWithImageOverlay', que é usado em várias partes do aplicativo, incluindo a página inicial, a página de tutoriais e a página atual. Ao refatorar o componente, acidentalmente quebrei a funcionalidade na página inicial, resultando em um botão com texto incorreto ('Common.access' ou 'Common.commingSoon') em vez das traduções adequadas ('Acessar' ou 'Em Breve'). Para evitar problemas semelhantes no futuro, é essencial escrever um teste que garanta que o componente funcione corretamente em todos os lugares em que é usado, verificando se as traduções e funcionalidades estão de acordo com o esperado",
      "howToTestTitle": "Como testar?",
      "howToTestDescription": "Para testar o componente, podemos realizar dois testes. O primeiro teste é para garantir que o componente funcione corretamente quando não possui um atributo 'href', retornando a string 'Em breve'. O segundo teste é para assegurar que o componente funcione corretamente quando possui um atributo 'href', retornando a string 'Acessar'."
    },
    "githubActions": {
      "title": "GitHub Actions",
      "description": "Aprenda a configurar CI/CD para aplicações Next.js com GitHub Actions.",
      "githubActionsTitle": "GitHub Actions",
      "githubActionsDescription": "GitHub Actions é uma ferramenta de CI/CD que permite automatizar tarefas, como testes, build e deploy, em um repositório do GitHub. Neste tutorial, vamos aprender a configurar o GitHub Actions para testar nossa aplicação Next.js antes de fazermos deploy.",
      "setupTitle": "Configuração",
      "setupDescription": "Para configurar o GitHub Actions, precisamos criar um arquivo chamado '.github/workflows/tests.yml' na raiz do projeto. Este arquivo contém as configurações do GitHub Actions. Vamos começar com a configuração para testar a aplicação.",
      "setupConclusion": "Agora, sempre que um pull request for aberto para a branch 'dev' ou 'main', o GitHub Actions executará automaticamente os testes da aplicação. Se os testes falharem, o pull request ainda poderá ser mesclado. No entanto, se você desejar que a aprovação dos testes seja obrigatória para a mesclagem, basta configurar essa regra nas configurações do repositório, acessando Configurações > Branches. Quando os testes passarem com sucesso, o pull request será aceito e o deploy ocorrerá automaticamente na Vercel assim que o pull request for mesclado."
    },
    "tailwindcss": {
      "title": "Tailwind CSS",
      "description": "Aprenda a configurar Tailwind CSS em aplicações Next.js."
    }
  }
}
